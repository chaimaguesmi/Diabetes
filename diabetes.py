# -*- coding: utf-8 -*-
"""Diabetes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n94hd-hE7EtE0naKjKa_lcaz9LOkDRga

import dependencies
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score
import tkinter as tk
from tkinter import simpledialog

"""loading the dataset"""

diabetes_dataset=pd.read_csv('diabetes.csv')

"""afficher les 5 premiers rows"""

diabetes_dataset.head()

diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

diabetes_dataset.shape

diabetes_dataset.groupby("Outcome").mean()

X = diabetes_dataset.drop(columns="Outcome", axis="1")
Y= diabetes_dataset["Outcome"]

"""data standard"""

scaler = StandardScaler()
scaler.fit(X)
X_S=scaler.transform(X) # values entre -1 et 1

X=X_S
Y= diabetes_dataset["Outcome"]

"""Split Test Train"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2 , stratify=Y, random_state=2)

"""Training

"""

classifier = svm.SVC(kernel="linear")

classifier.fit(X_train,Y_train)

"""Model Evaluation

accuracy score
"""

X_train_predict=classifier.predict(X_train)
acc_score=accuracy_score(X_train_predict,Y_train)

print(acc_score)

X_test_predict=classifier.predict(X_test)
acc_score_test=accuracy_score(X_test_predict,Y_test)

print(acc_score_test)

"""exemple"""
#input_data=(5,116,74,0,0,25.6,0.201,30)
from tkinter import messagebox

import tkinter as tk
import numpy as np

# Define submit_values function
def submit_values():
    # Extract input values from entry fields
    input_data = (
        float(value1.get()),
        float(value2.get()),
        float(value3.get()),
        float(value4.get()),
        float(value5.get()),
        float(value6.get()),
        float(value7.get()),
        float(value8.get())
    )

    # Convert input data to numpy array
    input_data_array = np.asarray(input_data)

    # Reshape input data to match the model input shape
    input_data_reshape = input_data_array.reshape(1, -1)

    # Standardize input data
    input_data_standard = scaler.transform(input_data_reshape)

    # Predict using the classifier
    prediction = classifier.predict(input_data_standard)

    # Determine the message based on prediction
    if prediction[0] == 0:
        message = "The person is not diabetic"
    else:
        message = "The person is diabetic"

    # Update the message label with the prediction result
    message_label.config(text=message)

# Create Tkinter window
root = tk.Tk()

# Create entry fields for input values
value1 = tk.Entry(root)
value2 = tk.Entry(root)
value3 = tk.Entry(root)
value4 = tk.Entry(root)
value5 = tk.Entry(root)
value6 = tk.Entry(root)
value7 = tk.Entry(root)
value8 = tk.Entry(root)

# Create labels for entry fields
value1_label = tk.Label(root, text="Pregnancies:")
value2_label = tk.Label(root, text="Glucose:")
value3_label = tk.Label(root, text="BloodPressure:")
value4_label = tk.Label(root, text="SkinThickness:")
value5_label = tk.Label(root, text="Insulin:")
value6_label = tk.Label(root, text="BMI:")
value7_label = tk.Label(root, text="DiabetesPedigreeFunction:")
value8_label = tk.Label(root, text="Age:")

# Create submit button
submit_button = tk.Button(root, text="Check", command=submit_values)

# Create label for displaying prediction message
message_label = tk.Label(root, text="")

# Grid layout for widgets
value1_label.grid(row=0, column=0)
value1.grid(row=0, column=1)
value2_label.grid(row=1, column=0)
value2.grid(row=1, column=1)
value3_label.grid(row=2, column=0)
value3.grid(row=2, column=1)
value4_label.grid(row=3, column=0)
value4.grid(row=3, column=1)
value5_label.grid(row=4, column=0)
value5.grid(row=4, column=1)
value6_label.grid(row=5, column=0)
value6.grid(row=5, column=1)
value7_label.grid(row=6, column=0)
value7.grid(row=6, column=1)
value8_label.grid(row=7, column=0)
value8.grid(row=7, column=1)
submit_button.grid(row=8, columnspan=2)
message_label.grid(row=9, columnspan=2)

# Run the Tkinter event loop
root.mainloop()
